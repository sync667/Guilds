/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.sonarqube' version '2.7'
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
}

group = "me.glaremasters"
version = "3.5.5.3-DEV"
sourceCompatibility = JavaVersion.VERSION_1_8

ext {
    base = "me.glaremasters.guilds.libs."
}

repositories {
    mavenCentral()

    maven {
        name = "spigot-repo"
        url = uri("https://hub.spigotmc.org/nexus/content/repositories/snapshots/")

        content {
            includeGroup("org.bukkit")
        }
    }
    
    maven {
        name = "sonatype"
        url = uri("https://oss.sonatype.org/content/groups/public/")
    }

    maven {
        name = "aikar-repo"
        url = uri("https://repo.aikar.co/content/groups/aikar/")

        content {
            includeGroup("co.aikar")
        }
    }

    maven {
        name = "glare-repo"
        url = uri("https://repo.glaremasters.me/repository/public/")
    }
}

shadowJar {
    minimize()
    relocate("org.bstats", "${base}bstats")
    relocate("co.aikar.commands", "${base}acf")
    relocate("co.aikar.locales", "${base}locales")
    relocate("co.aikar.taskchain", "${base}taskchain")
    relocate("ch.jalu.configme", "${base}configme")
    relocate("net.byteflux.libby", "${base}libby")
    relocate("com.zaxxer.hikari", "${base}hikari")
    relocate("org.jdbi", "${base}jdbi")
    relocate("org.mariadb.jdbc", "${base}mariadb")
    relocate("me.mattstudios.mfgui", "${base}mfgui")
    relocate("me.rayzr522.jsonmessage", "${base}jsonmessage")
    archiveFileName = "Guilds-${project.version}.jar"
}

dependencies {

    // Command Handling
    implementation("co.aikar:acf-paper:0.5.0-SNAPSHOT")

    // Bstats Data Collecting
    implementation("org.bstats:bstats-bukkit:1.7")

    // Runtime Dependency Downloading
    implementation("net.byteflux:libby-bukkit:0.0.2-SNAPSHOT")

    // Taskchain Scheduling
    implementation("co.aikar:taskchain-bukkit:3.7.2")

    // Worldguard Claim Handling
    implementation("org.codemc.worldguardwrapper:worldguardwrapper:1.1.6-SNAPSHOT")

    // Configuration Lib
    implementation("ch.jalu:configme:1.2.0")

    // Serializing Inventories via JSON
    implementation("com.dumptruckman.minecraft:JsonConfiguration:1.1")

    // Cross-Version Support
    implementation("com.github.cryptomorin:XSeries:5.3.1")

    // GUI Lib
    implementation("me.mattstudios.utils:matt-framework-gui:1.2.7")

    // Json Messages
    implementation("me.rayzr522:jsonmessage:1.2.0")

    // Kotlin collections
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Vault Support
    compileOnly("net.milkbowl:vault:1.7")

    // Database Stuff
    compileOnly("com.zaxxer:HikariCP:3.3.1")
    compileOnly("org.jdbi:jdbi3-core:3.8.2")
    compileOnly("org.jdbi:jdbi3-sqlobject:3.8.2")
    compileOnly("org.mariadb.jdbc:mariadb-java-client:2.4.0")

    // Logger
    compileOnly("org.slf4j:slf4j-api:1.7.25")

    // Bukkit Version
    compileOnly("org.bukkit:bukkit:1.15.2-R0.1-SNAPSHOT")

    // Mojang Library
    compileOnly("com.mojang:authlib:1.5.25")

    // PlaceholderAPI
    compileOnly("me.clip:placeholderapi:2.10.6")

}

sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
    kotlinOptions.javaParameters = true
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}